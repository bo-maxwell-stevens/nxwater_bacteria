install.packages("deseq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
a
install.packages("locfit")
install.packages("deseq2", repos="http://cran.us.r-project.org")
install.packages("deseq2")
update.packages()
install.packages("deseq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
#setwd("C:/Users/bo.stevens/USDA/REE-ARS-PA3012-WMSR - Akron/R/Sequencing_data_analysis")
setwd("C:/Users/Daniel.Manter/USDA/ARS-PA3012-WMSRU - Akron/Bo_structure/Statistics/Sequencing_data_analysis")
install.packages("microeco")
library(microeco)
# use data files inside the package which were downloaded from (https://docs.qiime2.org/2022.2/tutorials/pd-mice/).
abund_file_path <- system.file("extdata", "rep-seqs-paired.qza", package="file2meco")
sample_file_path <- system.file("extdata", "feature-table.txt", package="file2meco")
taxonomy_file_path <- system.file("extdata", "taxonomy-paired.qza", package="file2meco")
# construct microtable object
qiime2meco(abund_file_path)
library(microeco)
# construct microtable object
qiime2meco(abund_file_path)
library(microeco)
# construct microtable object
qiime2meco(abund_file_path)
?microeco
# construct microtable object
qiime2meco(abund_file_path)
# construct microtable object
qiime2meco(abund_file_path)
?qiime2meco
# use data files inside the package which were downloaded from (https://docs.qiime2.org/2022.2/tutorials/pd-mice/).
abund_file_path <- system.file("extdata", "table-paired.qza", package="file2meco")
sample_file_path <- system.file("extdata", "feature-table.txt", package="file2meco")
taxonomy_file_path <- system.file("extdata", "taxonomy-paired.qza", package="file2meco")
# construct microtable object
qiime2meco(abund_file_path)
sessionInfo()
thin = 5000
samples = 1000
transient = ceiling(thin*samples*.5)
transient
install.packages("libRblas")
install.packages("phyloseq")
install.packages("Rtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library('phyloseq')
P.A <- emu_to_phyloseq(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet='Sheet1', range='B1:X230',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
P.A <- emu_to_phyloseq(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet='Sheet1', range='B1:X230',
sample_names='Barcode_key',
run_name='16S')
setwd("C:/Users/bo.stevens/USDA/REE-ARS-PA3012-WMSR - Akron/Bo_structure/Bacterial manuscript/Code/nxwater_bacteria/Statistics")
source("myFunctions.R")
P.A <- emu_to_phyloseq(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet='Sheet1', range='B1:X230',
sample_names='Barcode_key',
run_name='16S')
P.A <- emu_to_phyloseq(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet='Sheet1', range='B1:X230',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
P.A <- emu_to_phyloseq(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet='Sheet1', range='B1:X230',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
P.A <- emu_to_phyloseq(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet='Sheet1', range='B1:X230',
sample_names='Barcode_key',
run_name='16S')
P.rel <- P.A
saveRDS(P.A, 'P.16S.all.rel.RDS')
set.seed(42)
P.glom <- tax_glom(P.rel, taxrank='species')
data <- data.frame(t(otu_table(P.glom)))
names(data) <- tax_table(P.glom)[,'species']
#data <- sqrt(data)
dist <- vegdist(data, method='bray')
library('ggplot2')
library('knitr')
library('phyloseq')
library('readxl')
library('vegan')
#data <- sqrt(data)
dist <- vegdist(data, method='bray')
d <- data.frame(sample_data(P.glom))
# sum(!is.na(as.numeric(d$Nitrogen)))
# levels(d$Nitrogen)
# sum(!is.na(as.factor(d$Nitrogen)))
# d$Nitrogen <- factor(d$Nitrogen)
# d$Water <- factor(d$Water)
ord <- dbrda(dist ~ Nitrogen * Water * Binned_date, data=d)
# sum(!is.na(as.numeric(d$Nitrogen)))
# levels(d$Nitrogen)
# sum(!is.na(as.factor(d$Nitrogen)))
# d$Nitrogen <- factor(d$Nitrogen)
# d$Water <- factor(d$Water)
ord <- dbrda(dist ~ Nitrogen * Water * Sample.date, data=d)
# adonis2(dist ~ nitrogen * water * sample_date, data=d)
disp <- betadisper(dist, d$Sample.date)
anova(disp)
disp <- betadisper(dist, d$Water)
anova(disp)
disp <- betadisper(dist, d$Nitrogen)
anova(disp)
adonis_out <- adonis2(dist ~ Nitrogen * Water * Sample.date, data=d)
adonis_out
adonis_out$R2
predictor_r2 <- head(adonis_out$R2, -2)
predictor_r2_sum <- sum(predictor_r2)
predictor_r2_sum
anova(ord, permutations = how(nperm = 999))
# Plotting
ev <- eigenvals(ord)
Axis1_exp = round(ev[1] / sum(ev) * 100, 1)
Axis2_exp = round(ev[2] / sum(ev) * 100, 1)
axes <- as.data.frame(vegan::scores(ord, display="sites", choices=c(1:2)))
names(axes) <- c("Axis1", "Axis2")
axes <- cbind(d, axes)
# axes$nitrogen <- factor(axes$Nitrogen)
# axes$water <- factor(axes$Water)
# axes$sample_date <- factor(axes$sample_date)
axes$Sample.date <- factor(axes$Sample.date)
axes$trt <- interaction(axes$Nitrogen, axes$Water)
mult <- 1
#  facet_grid(water ~ sample_date) +
#  geom_point(size=6, shape=21) +
#  scale_fill_brewer(palette = 'Set1') +
#  stat_ellipse(aes(group=nitrogen, color=nitrogen), type='t', level=0.95) +
#   guides(fill = guide_legend(
#     override.aes=list(shape = rep(21,3)))) +
#   labs(x=paste0('CAP1 (', Axis1_exp, '%)'),
#        y=paste0('CAP2 (', Axis2_exp, '%)')) +
#   scale_color_brewer(palette = 'Set1')  +
#   theme_bw()
axes$Nitrogen <- as.factor(axes$Nitrogen)
axes$Water <- as.factor(axes$Water)
#The below graph omits the biplot arrows
ggplot(data=axes, aes(x=Axis1, y=Axis2, fill=Nitrogen)) +
ggtitle(paste(dataset, "(Bray-Curtis dbRDA)")) +
facet_grid(Water ~ Sample.date) +
geom_point(size=6, shape=21) +
scale_fill_brewer(palette = 'Set1') +
# stat_ellipse(aes(group=Nitrogen, color=Nitrogen), type='t', level=0.95) +
guides(fill = guide_legend(
override.aes=list(shape = rep(21,3)))) +
labs(x=paste0('CAP1 (', Axis1_exp, '%)'),
y=paste0('CAP2 (', Axis2_exp, '%)')) +
scale_color_brewer(palette = 'Set1')  +
theme_bw()
dataset <- "Bacteria"
output <- "16S"
#The below graph omits the biplot arrows
ggplot(data=axes, aes(x=Axis1, y=Axis2, fill=Nitrogen)) +
ggtitle(paste(dataset, "(Bray-Curtis dbRDA)")) +
facet_grid(Water ~ Sample.date) +
geom_point(size=6, shape=21) +
scale_fill_brewer(palette = 'Set1') +
# stat_ellipse(aes(group=Nitrogen, color=Nitrogen), type='t', level=0.95) +
guides(fill = guide_legend(
override.aes=list(shape = rep(21,3)))) +
labs(x=paste0('CAP1 (', Axis1_exp, '%)'),
y=paste0('CAP2 (', Axis2_exp, '%)')) +
scale_color_brewer(palette = 'Set1')  +
theme_bw()
ggsave("../Ouput/Figures/dbRDA.png")
ggsave("../Output/Figures/dbRDA.png")
install.packages('tinytex')
tinytex::install_tinytex()  # install TinyTeX
data <- sqrt(data)
dist <- vegdist(data, method='bray')
d <- data.frame(sample_data(P.glom))
# sum(!is.na(as.numeric(d$Nitrogen)))
# levels(d$Nitrogen)
# sum(!is.na(as.factor(d$Nitrogen)))
# d$Nitrogen <- factor(d$Nitrogen)
# d$Water <- factor(d$Water)
ord <- dbrda(dist ~ Nitrogen * Water * Sample.date, data=d)
# adonis2(dist ~ nitrogen * water * sample_date, data=d)
disp <- betadisper(dist, d$Sample.date)
anova(disp)
data <- data.frame(t(otu_table(P.glom)))
disp <- betadisper(dist, d$Water)
anova(disp)
disp <- betadisper(dist, d$Nitrogen)
anova(disp)
# data <- sqrt(data)
data <- log(data + 1)
dist <- vegdist(data, method='bray')
d <- data.frame(sample_data(P.glom))
# sum(!is.na(as.numeric(d$Nitrogen)))
# levels(d$Nitrogen)
# sum(!is.na(as.factor(d$Nitrogen)))
# d$Nitrogen <- factor(d$Nitrogen)
# d$Water <- factor(d$Water)
ord <- dbrda(dist ~ Nitrogen * Water * Sample.date, data=d)
# adonis2(dist ~ nitrogen * water * sample_date, data=d)
disp <- betadisper(dist, d$Sample.date)
anova(disp)
disp <- betadisper(dist, d$Water)
anova(disp)
disp <- betadisper(dist, d$Nitrogen)
anova(disp)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(emmeans)
library(ggplot2)
library(ggthemes)
library(multcomp)
library(phyloseq)
library(RColorBrewer)
library(readxl)
library(tidyverse)
library(tidyverse)
library(microbiomeMarker)
install.packages("microbiomeMarker")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiomeMarker")
library(microbiomeMarker)
source("myFunctions.R")
# Create GIBBs relative abundances for RhizoDD1
EC.gibbs.info <- read.csv('GIBBs.EC.numbers.csv')
EC.gibbs <- read.csv('EMU_database.GIBBs.EC.PICRUSt2.R.csv')
EC.gibbs <- read.csv('EMU_database.GIBBs.EC.PICRUSt2.R.csv')
EC.gibbs <- read.csv('EMU_database.GIBBs.EC.PICRUSt2.R.csv')
row.names(EC.gibbs) <- EC.gibbs$tax_id
EC.gibbs <- EC.gibbs[,2:34]
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv('../rel_abund_16S_ABC_qpcr_adj.csv')
knitr::opts_chunk$set(echo = TRUE)
EC.sub <- EC.gibbs
EC.bin <- EC.sub %>%
mutate_if(is.numeric, ~1 * (. > 0))
samples <- names(df)[9:length(names(df))]
enzymes <- names(EC.sub)[11:length(names(EC.sub))]
reads <- colSums(df[,samples], na.rm=T)
final <- data.frame(matrix(ncol = length(samples), nrow = length(enzymes)))
names(final) <- samples
row.names(final) <- enzymes
for (i in samples) {
for (j in enzymes) {
value <- sum(df[,i] / EC.bin$X16S_rRNA_Count_1 * EC.bin[,j], na.rm=T) / reads[i]
final[j,i] <- value
}
}
write.csv(final, 'GIBBs.rel_abund.final.A.csv')
source("myFunctions.R")
knitr::opts_chunk$set(echo = TRUE)
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
knitr::opts_chunk$set(echo = TRUE)
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='../rel_abund_16S_ABC_qpcr_adj.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
knitr::opts_chunk$set(echo = TRUE)
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='GIBBs.rel_abund.final.A.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='name',
run_name='16S')
knitr::opts_chunk$set(echo = TRUE)
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='GIBBs.rel_abund.final.A.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='GIBBs.rel_abund.final.A.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
meta <- data.frame(read.csv('../mapping_file_with_metadata_harvest_biomass_2022.csv'))
knitr::opts_chunk$set(echo = TRUE)
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='GIBBs.rel_abund.final.A.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='GIBBs.rel_abund.final.A.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
source("myFunctions.R")
# use custom emu_to_phyloseq function to create phyloseq object
P.A <- gibbs_to_phyloseq_EC(RA_file='GIBBs.rel_abund.final.A.csv',
meta_file='../mapping_file_with_metadata_harvest_biomass_2022.csv',
sheet = "Rhizo1", range='A1:S97',
sample_names='Barcode_key',
run_name='16S')
# Create GIBBs relative abundances for RhizoDD1
EC.gibbs.info <- read.csv('GIBBs.EC.numbers.csv')
EC.gibbs <- read.csv('EMU_database.GIBBs.EC.PICRUSt2.R.csv')
row.names(EC.gibbs) <- EC.gibbs$tax_id
EC.gibbs <- EC.gibbs[,2:34]
df <- read.csv('../rel_abund_16S_ABC_qpcr_adj.csv')
EC.sub <- EC.gibbs
EC.bin <- EC.sub %>%
mutate_if(is.numeric, ~1 * (. > 0))
samples <- names(df)[9:length(names(df))]
enzymes <- names(EC.sub)[11:length(names(EC.sub))]
reads <- colSums(df[,samples], na.rm=T)
final <- data.frame(matrix(ncol = length(samples), nrow = length(enzymes)))
View(final)
samples
enzymes
reads
names(final) <- samples
row.names(final) <- enzymes
View(EC.bin)
EC.bin
View(EC.bin)
View(df)
for (i in samples) {
for (j in enzymes) {
value <- sum(df[,i] / EC.bin$X16S_rRNA_Count_1 * EC.bin[,j], na.rm=T) / reads[i]
final[j,i] <- value
}
}
View(final)
final <- data.frame(matrix(ncol = length(samples), nrow = length(enzymes)))
names(final) <- samples
row.names(final) <- enzymes
reads
EC.bin
View(EC.bin)
View(EC.bin)
knitr::opts_chunk$set(echo = TRUE)
i = samples[2]
df[,i]
EC.bin$X16S_rRNA_Count_1
EC.sub <- EC.gibbs
EC.bin <- EC.sub %>%
mutate_if(is.numeric, ~1 * (. > 0))
View(EC.bin)
View(EC.bin)
knitr::opts_chunk$set(echo = TRUE)
EC.bin$X16S_rRNA_Count
for (i in samples) {
for (j in enzymes) {
value <- sum(df[,i] / EC.bin$X16S_rRNA_Count * EC.bin[,j], na.rm=T) / reads[i]
final[j,i] <- value
}
}
write.csv(final, 'GIBBs.rel_abund.final.A.csv')
